nutrients <- read.table('nutrients.txt')
#a) Decide whether it is appropriate to use the original variables or the standardized ones, and perform a Principal
#Component Analysis of the dataset. Report the loadings of the first principal component.
head(nutrients)
help("bartlett.test")
as.list(nutrients)
nutrients.list <- as.list(nutrients)
View(nutrients)
View(nutrients.list)
bartlett.test(nutrients.list)
#a) Decide whether it is appropriate to use the original variables or the standardized ones, and perform a Principal
#Component Analysis of the dataset. Report the loadings of the first principal component.
head(nutrients)
bartlett.test(nutrients$V1,nutrients$V2,nutrients$V3)
nutrients$V1
nutrients <- read.table('nutrients.txt', header = T)
#a) Decide whether it is appropriate to use the original variables or the standardized ones, and perform a Principal
#Component Analysis of the dataset. Report the loadings of the first principal component.
head(nutrients)
bartlett.test(nutrients$V1,nutrients$V2,nutrients$V3)
nutrients.list <- as.list(nutrients)
bartlett.test(nutrients.list)
nutrients.list <- as.list(nutrients)
bartlett.test(nutrients.list)
boxplot(nutrients)
#varianze molto diverse => standardizzo
pc.nutrients <- princomp(nutrients)
pc.nutrients
summary(pc.nutrients)
#varianze molto diverse => standardizzo
std.nutrients <- scale(nutrients)
pc.nutrients <- princomp(std.nutrients)
summary(pc.nutrients)
pc.nutrients$loadings
loadings <- pc.nutrients$loadings
loadings <- pc.nutrients$loadings[,1]
loadings <- pc.nutrients$loadings
load.pc1 <- loadings[,1]
load.pc1
#b) Report a plot of the loadings of the first 3 principal components and interpret them.
barplot(loadings[,1:3])
loadings[,1:3]
#b) Report a plot of the loadings of the first 3 principal components and interpret them.
for(i in 1:3) barplot(load.tour[,i], ylim = c(-1, 1), main=paste("PC",i))
#b) Report a plot of the loadings of the first 3 principal components and interpret them.
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), main=paste("PC",i))
#b) Report a plot of the loadings of the first 3 principal components and interpret them.
x11()
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), main=paste("PC",i))
par(mfrow = c(1,3))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), main=paste("PC",i))
x11()
par(mfrow = c(1,3))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), main=paste("PC",i))
#c) Report the biplot of the data along the first two principal components and describe what characterizes the
#cereals with positive scores for both the first and second components.
pc.nutrients$scores
biplot(pc.nutrients$scores[,1:2])
help("biplot")
biplot(pc.nutrients$scores[,1], pc.nutrients$scores[,2])
pc.nutrients$scores[,1]
pc.nutrients$scores[,2]
#a) Decide whether it is appropriate to use the original variables or the standardized ones, and perform a Principal
#Component Analysis of the dataset. Report the loadings of the first principal component.
head(nutrients)
plot(pc.nutrients$scores[,1], pc.nutrients$scores[,2])
dev.off()
plot(pc.nutrients$scores[,1], pc.nutrients$scores[,2])
abline(v=0)
abline(h=0)
x11()
par(mfrow = c(1,3))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), main=paste("PC",i))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), type='l', main=paste("PC",i))
x11()
par(mfrow = c(1,3))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), type='l', main=paste("PC",i))
x11()
par(mfrow = c(1,3))
for(i in 1:3) barplot(loadings[,i], ylim = c(-1, 1), las = 2, main=paste("PC",i))
# missing of interpretation
#d) Report the screeplot. Propose (with motivations) a dimensionality reduction of the dataset. Report the variance
#explained along the principal components retained.
plot(cumsum(pc.nutrients$sde^2)/sum(pc.nutrients$sde^2), type='b', axes=F, xlab='Number of components', ylab='Contribution to the total variance', ylim=c(0,1))
abline(h=0.9)
x11()
plot(cumsum(pc.nutrients$sde^2)/sum(pc.nutrients$sde^2), type='b', axes=F, xlab='Number of components', ylab='Contribution to the total variance', ylim=c(0,1))
abline(h=0.9)
x11()
plot(cumsum(pc.nutrients$sde^2)/sum(pc.nutrients$sde^2), type='b', xlab='Number of components', ylab='Contribution to the total variance', ylim=c(0,1))
abline(h=0.9)
x.new <- c(400, 9, 5, 100, 30, 4)
loadings[,1]
pc1.new <- rbind(loadings[,1]) %*% cbind(x.new)
pc1.new <- rbind(loadings[,1]) %*% cbind(x.new)
pc2.new <- rbind(loadings[,2]) %*% cbind(x.new)
pc3.new <- rbind(loadings[,3]) %*% cbind(x.new)
streaming <- read.table('streaming.txt')
head(streaming)
dist <- dist(streaming)
streaming
streaming <- read.table('streaming.txt', header = T)
head(streaming)
dist <- dist(streaming)
dist <- dist(streaming, method = 'euclidian')
dendogram.s <- hclust(dist, method='single')
plot(dendogram.s)
rect.hclust(2)
rect.hclust(k=2)
rect.hclust(dendogram.s, k=2)
#b) Report the centroids of the clusters, their size and the cophenetic coefficient.
clusters <- cutree(dendogram.s, k=2)
clusters
clust1 <- streaming[which(clusters==1),]
clust1 <- streaming[which(clusters==1),]
clust2 <- streaming[which(clusters==2),]
colMeans(clust1)
colMeans(clust2)
plot(streaming)
dim(clust1)[1]
dim(clust2)[2]
dim(clust2)[1]
help("cophenetic")
cophenetic(dendogram.s)
#c) Provide Bonferroni intervals (global level 95%) for the mean of minutes and artists, within each of the clusters
#identified at point (a). Introduce and verify the appropriate assumptions.
library(MVN)
mvn(clust1)
mvn(clust2)
m.1 <- colMeans(clust1)
m.2 <- colMeans(clust2)
n.2 <- dim(clust2)[1]
#clust1
head(streaming)
cov.1 <- cov(clust1)
k <- 2
ci1 <- c(
m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
m.1,
m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
alpha < 0.05
cov.1 <- cov(clust1)
k <- 2
ci1 <- c(
m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
m.1,
m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
alpha < 0.05
alpha <- 0.05
cov.1 <- cov(clust1)
k <- 2
ci1 <- c(
m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
m.1,
m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
m.1 <- colMeans(clust1)
m.2 <- colMeans(clust2)
n.1 <- dim(clust1)[1]
n.2 <- dim(clust2)[1]
ci1 <- c(
m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
m.1,
m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
ci1
ci1 <- cbind(
inf = m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
mean = m.1,
sup = m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
ci1
m.1
ci1 <- cbind(
inf = m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
mean = m.1,
sup = m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
ci1
cbind(
inf = m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1),
mean = m.1,
sup = m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
)
m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( cov.1 / n.1)
ci1 <- cbind(
inf = m.1 - qt(1-alpha/(2*k),n.1-1) * sqrt( diag(cov.1) / n.1),
mean = m.1,
sup = m.1 + qt(1-alpha/(2*k),n.1-1) * sqrt( diag(cov.1) / n.1)
)
ci1
#clust2
cov.2 <- cov(clust2)
ci1 <- cbind(
inf = m.2 - qt(1-alpha/(2*k),n.2-1) * sqrt( diag(cov.2) / n.2),
mean = m.2,
sup = m.2 + qt(1-alpha/(2*k),n.2-1) * sqrt( diag(cov.2) / n.2)
)
ci1
wine <- read.table('wine.txt')
head(wine)
plot(wine[,-3], col=wine[,3])
plot(wine[,-3], col=as.factor(wine[,3]))
#a) Estimate the parameters of the model ({β0,g , β1,g , σ}). Verify the model assumptions, reporting any plot you
#consider important.
#  alcoholg = β0,g + β1,g · sugar + ϵ,
attach(wine)
lm1 <- lm(alcohol ~ type + type:sugar)
summary(lm1)
head(wine)
type
type <- as.factor(type)
lm1 <- lm(alcohol ~ type + type:sugar)
summary(lm1)
type
type <- as.factor(type)
lm1 <- lm(alcohol ~ type + type:sugar)
summary(lm1)
help("as.factor")
type <- as.factor(type, levels = c('red', 'rose', 'white'))
lm1 <- lm(alcohol ~ type + type:sugar)
summary(lm1)
type <- relevel(type, ref = "type")
detach(wine)
#a) Estimate the parameters of the model ({β0,g , β1,g , σ}). Verify the model assumptions, reporting any plot you
#consider important.
#  alcoholg = β0,g + β1,g · sugar + ϵ,
attach(wine)
rm(type)
#a) Estimate the parameters of the model ({β0,g , β1,g , σ}). Verify the model assumptions, reporting any plot you
#consider important.
#  alcoholg = β0,g + β1,g · sugar + ϵ,
attach(wine)
wine <- read.table('wine.txt')
#a) Estimate the parameters of the model ({β0,g , β1,g , σ}). Verify the model assumptions, reporting any plot you
#consider important.
#  alcoholg = β0,g + β1,g · sugar + ϵ,
attach(wine)
rm(list=ls())
wine <- read.table('wine.txt')
head(wine)
plot(wine[,-3], col=as.factor(wine[,3]))
lm1 <- lm(alcohol ~ type + type:sugar, wine)
summary(lm1)
wine$type <- relevel(wine$type, ref = "type")
lm1 <- lm(alcohol:type ~ type + type:sugar, wine)
lm1 <- lm(alcohol ~ as.factor(type) + as.factor(type):sugar, wine)
summary(lm1)
#a) Estimate the parameters of the model ({β0,g , β1,g , σ}). Verify the model assumptions, reporting any plot you
#consider important.
#  alcoholg = β0,g + β1,g · sugar + ϵ,
wine$type <- as.factor(wine$type)
lm1 <- lm(alcohol ~ type + type:sugar, wine)
summary(lm1)
wine$type <- relevel(wine$type, ref = "type")
#dummys:
#00 Rose
#10 white
#11 red
wine
which(wine$type == 'red')
wine <- read.table('wine.txt')
head(wine)
plot(wine[,-3], col=as.factor(wine[,3]))
#dummys:
#00 Rose
#10 white
#11 red
wine
which(wine$type == 'red')
which(wine$type == 'Red')
which(wine$type == 'Rose')
which(wine$type == 'White')
dim(wine)[1]
dRed <- rep(c(1,0), c(68,179-68))
dRed <- rep(c(1,0), c(68,179-68))
which(wine$type == 'Rose')
length(which(wine$type == 'Rose')
)
119-69
which(wine$type == 'Rose')
dRose <- rep(c(0,1,0),c(68,119-69+1,179-119))
data <- cbind(wine[,1:2], dRed = dRed, dRose = dRose)
data
lm1 <- lm(alcohol ~ dRed + dRose + dRed:sugar + dRose:sugar, data)
summary(lm1)
lm1 <- lm(alcohol ~ dRed + dRose + sugar + dRed:sugar + dRose:sugar, data)
summary(lm1)
#beta0.white = b0       beta1.white = b3
#beta0.red = b0+b1      beta1.red = b3+b4
#beta0.rose = b0+b2     beta1.rose = b3+b5
lm1$coefficients
sum(lm1$residuals^2)/lm1$df.residual
par(mfrow=c(2,2))
plot(lm1)
cov(lm1$residuals)
library(car)
linearHypothesis(lm1, cbind(c(0,1,0,0,0,0),
c(0,0,1,0,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)), c(0,0,0,0))
linearHypothesis(lm1, rbind(c(0,1,0,0,0,0),
c(0,0,1,0,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)), c(0,0,0,0))
summary(lm1)
#c) Based on tests (b) or any other test deemed relevant, reduce the model and report the updated model
#parameters.
summary(lm1)
lm2 <- lm(alcohol ~ dRose + sugar + dRed:sugar + dRose:sugar, data)
summary(lm2)
lm3 <- lm(alcohol ~ sugar + dRed:sugar + dRose:sugar, data)
summary(lm3)
lm3$coefficients
sum(lm3$residuals^2)/lm3$df.residual
#d) Build a prediction interval at 99% for a new bottle of red wine made with grapes with 20 g of sugar.
x.new <- data.frame(sugar = 20, dRed = 1, dRose = 0)
predict.lm(lm3, x.new)
sig <- sum(lm3$residuals^2)/lm3$df.residual
n <- dim(wine)[1]
Z <- model.matrix(lm3, data)
z0 <- model.matrix(lm3, x.new)
z0
x.new
Z <- model.matrix(lm3, data)
Z
z0 <- model.matrix(lm3, x.new)
Z <- model.matrix(lm3, data = data)
z0 <- model.matrix(lm3, data = x.new)
summary(lm3)
